/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

* {
  margin: 0;
  padding: 0;

  /* padding to be included in height and width */
  box-sizing: border-box;
}

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: #777777;
  padding: 30px;
}

.header {
  /* 95 percent of view height */
  height: 95vh;

  /* gradient from left to right bottom, light to dark, under which you have the hero image */
  background-image: linear-gradient(
    to right bottom,
    #7ed56fd0, 
    #28b485d3
    ),
    url('../img/hero.jpg');

  /* trys to fit element in size of viewport */
  background-size: cover;

  /* on resizing veiw port, the image top remains at its position without crop */
  background-position: top;

  /* specify coordinates of poly where the clip is visible, clockwise */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

  position: relative;
}


.logo-box {
  position: absolute;

  /* this would be relative to the parent, so have to set header as relative */
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px;
  /* width will be figured out by the browser */
}

.logo:hover {
  animation: rotate 1s linear;
}


.text-box {
  position: absolute;

  /* this in relation to parent element */
  top: 40%;
  left: 50%;

  /* to center it, move back 50 percent of size of element to x and y */
  transform: translate(-50%, -50%);

  /* centers text or any inline / inline-block elements */
  text-align: center;
}

.heading-primary {
  color: #ffffff;
  text-transform: uppercase;

  /* back part of element is hidden during transform, this is for smoothness hack */
  backface-visibility: hidden;
  margin-bottom: 60px;
}

.heading-primary-main {
  display: block;
  font-size: 60px;
  font-weight: 400;

  /* space between letters, pretty rad! */
  letter-spacing: 35px;

  /* need to specify duration, not just name */
  animation-name: moveInLeft;
  animation-duration: 2s;

  /* delay before start of animation */
  animation-delay: 0.1s;

  /* how many times do you want this to happen */
  animation-iteration-count: 1;

  /* how animation should progress over given duration; ease-in is fast to slow */
  animation-timing-function: ease-in;
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;

  /* awesome shorthand */
  animation: moveInRight 1s ease-in;
}

@keyframes moveInLeft {
  0% {
    /* invisible */
    opacity: 0;
    transform: translateX(-100px) rotate(-10deg);
  }

  50% {
    transform: translateX(10px) rotate(10deg);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    /* invisible */
    opacity: 0;
    transform: translateX(100px);
  }

  80% {
    transform: translateX(-10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes rotate {
  0% {
    transform: rotate(-270deg);
  }

  33% {
    transform: rotate(-180deg);
  }

  66% {
    transform: rotate(-90deg);
  }

  100% {
    transform: translate(0);
  }
}

.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  border: 1px solid cyan;

  /* allow other elements to sit to their left and right */
  display: inline-block;
  border-radius: 100px;

  /* allows you to change property values smoothly (from one value to another),
  over a given duration. all as in all properties, generally add to init state */
  transition: all 0.2s;
}

.btn:hover {
  transform: translateY(-3px);

  /* direction x, y width and how much blur,
  rgb followed by transparency, all black and somewhat transparent*/
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

/* when you click the element */
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn-white {
  background-color: white;
  color: #777777;
}